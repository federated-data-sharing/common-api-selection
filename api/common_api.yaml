openapi: 3.0.0

info:
  title: Common API for Federated Data Sharing
  description: |
    A set of APIs to support different levels of data sharing in a federated network. 
    The API has three parts Metadata, Selection and Compute. A site must implement the Metadata API, 
    and it can either implement the Selection API or the Compute API. In the case that the Compute API
    is implemented, the Selection API must be implemented as input to compute tasks. Currently, the Compute API endpoints are omitted as they are under review. 
    
    This schema describes the Selection API. The Metadata API and Tasks API are houlsed in their
    own repositories in separate files.
  version: "1.1.0"

externalDocs:
  description: Common API for Federated Data Sharing Github repository
  url: https://github.com/federated-data-sharing/common-api

tags:
  - name: Selection API

paths:
  /selection/validate:
    post:
      summary: Validate a given selection query.
      description: With a simple GraphQL query, check whether the query is valid and corresponds to real fields at this location.
      
      requestBody:
        description: GraphQL Query
        content:
          text/plain:
            schema:
              type: string
              example: "{hospital_b_patient_results {table_1 {sex, age}}"
        required: true

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/selection_success"
        400:
          description: Bad Request (400) - The server cannot process the request. Please check your request body.
        401:
          description: Unauthorized (401)
        404:
          description: Not Found (404) - Dataset not found.
          
      tags:
        - Selection API


  /selection/beacon:
    post:
      summary: Get a Beacon (T/F) for a specified data selection.
      description: With a simple Graph QL query, check which locations contain data relevant to a specific query.

      requestBody:
        description: GraphQL Query
        content:
          text/plain:
            schema:
              type: string
              example: "{hospital_b_patient_results {table_1 {sex, age}}"
        required: true

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/selection_success"
        400:
          description: Bad Request (400) - The server cannot process the request. Please check your request body.
        401:
          description: Unauthorized (401)
        404:
          description: Not Found (404) - Dataset not found.
      
      tags:
        - Selection API


  /selection/select:
    post:
      summary: Perform a selection operation on a dataset. 
      description: With a simple Graph QL query, returns the full selection of data in a JSON or .csv format.

      requestBody:
        description: GraphQL Query
        content:
          text/plain:
            schema:
              type: string
              example: "{hospital_b_patient_results {table_1 {sex, age}}"
        required: true

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
            application/gzip:
              schema:
                type: object
                x-content-type: application/gzip
        400:
          description: Bad Request (400) - The server cannot process the request. Please check your request body.
        401:
          description: Unauthorized (401)
        404:
          description: Not Found (404) - Dataset not found.
          
      tags:
        - Selection API


  /selection/preview:
    post:
      summary: Preview the results of a selection operation on a dataset.
      description: With a simple Graph QL query, returns a small sample of the selection in a JSON or .csv format.

      requestBody:
        description: GraphQL Query
        content:
          text/plain:
            schema:
              type: string
              example: "{hospital_b_patient_results {table_1 {sex, age}}"
        required: true

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
            application/gzip:
              schema:
                type: object
                x-content-type: application/gzip
        400:
          description: Bad Request (400) - The server cannot process the request. Please check your request body.
        401:
          description: Unauthorized (401)
        404:
          description: Not Found (404) - Dataset not found.
          
      tags:
        - Selection API


  /selection/profile:
    post:
      summary: Get a profile of a selection operation on a dataset.
      description: Returns a set of metrics for the given selection operation.

      requestBody:
        description: GraphQL Query
        content:
          text/plain:
            schema:
              type: string
              example: "{hospital_b_patient_results {table_1 {sex, age}}"
        required: true

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          description: Bad Request (400) - The server cannot process the request. Please check your request body.
        401:
          description: Unauthorized (401)
        404:
          description: Not Found (404) - Dataset not found.
          
      tags:
        - Selection API

components:
  schemas:
  
    selection_success:
      description: A object containing a boolean response for whether an action was successful or not.
      type: object
      properties:
        success:
          type: boolean
      example:
        success: true
        

  securitySchemes:
    oAuth2Implicit:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://example.org/api/authorize
          scopes:
            api://example_id/read_api: allows reading resources
      x-tokenInfoFunc: common_api_server.controllers.authorization_controller.check_oAuth2Implicit
      x-scopeValidateFunc: common_api_server.controllers.authorization_controller.validate_scope_oAuth2Implicit
